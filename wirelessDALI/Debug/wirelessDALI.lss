
wirelessDALI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000238  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c88  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a16  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003db  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051d  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000233  00000000  00000000  000023a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  d4:	0c 94 1a 01 	jmp	0x234	; 0x234 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <uart_init>:
static uint8_t on4 = 0b01010101;

//Include Libraries
void uart_init(){
	
	UBRR0H |= (unsigned char)((104)>>8); //sets the baud rate to 9600bps
  dc:	e5 ec       	ldi	r30, 0xC5	; 197
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 83       	st	Z, r24
	UBRR0L |= (unsigned char)(104);
  e4:	e4 ec       	ldi	r30, 0xC4	; 196
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 66       	ori	r24, 0x68	; 104
  ec:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN0); //enables UART transmitter
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); //sets character size to 8 data bits
  f8:	e2 ec       	ldi	r30, 0xC2	; 194
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	86 60       	ori	r24, 0x06	; 6
 100:	80 83       	st	Z, r24
 102:	08 95       	ret

00000104 <uart_transmit>:
}

//UART transmitter  function
void uart_transmit(uint8_t myValue){

	while (!((1<<UDRE0)&&(UCSR0A))); //wait until the transmit register is ready
 104:	e0 ec       	ldi	r30, 0xC0	; 192
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	90 81       	ld	r25, Z
 10a:	99 23       	and	r25, r25
 10c:	e9 f3       	breq	.-6      	; 0x108 <uart_transmit+0x4>
	UDR0 = myValue;//once ready, store next value for transmission
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 112:	08 95       	ret

00000114 <InitADC>:
}

void InitADC()
{
	// Select VREF=AVcc
	ADMUX |= (1<<REFS0);
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
	
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0);
 11e:	80 81       	ld	r24, Z
 120:	80 7f       	andi	r24, 0xF0	; 240
 122:	80 83       	st	Z, r24
	
	//set pre-scaler to 128 and enable ADC and enable ADC interrupt
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADATE)|(1<<ADIE);
 124:	ea e7       	ldi	r30, 0x7A	; 122
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	8f 6a       	ori	r24, 0xAF	; 175
 12c:	80 83       	st	Z, r24
	ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0));
 12e:	eb e7       	ldi	r30, 0x7B	; 123
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	88 7f       	andi	r24, 0xF8	; 248
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <__vector_1>:
	
	tempCount++;
}
*/

ISR(INT0_vect){
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	EIMSK &= ~(1 << INT0);
 15c:	e8 98       	cbi	0x1d, 0	; 29
	if(flag){
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 162:	88 23       	and	r24, r24
 164:	c9 f0       	breq	.+50     	; 0x198 <__vector_1+0x5e>
// 		uart_transmit(on2);
// 		_delay_ms(50);
// 		uart_transmit(on3);
// 		_delay_ms(50);
// 		uart_transmit(on4);
		uart_transmit(onbyte1);
 166:	8e ef       	ldi	r24, 0xFE	; 254
 168:	0e 94 82 00 	call	0x104	; 0x104 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	2f ef       	ldi	r18, 0xFF	; 255
 16e:	80 e7       	ldi	r24, 0x70	; 112
 170:	92 e0       	ldi	r25, 0x02	; 2
 172:	21 50       	subi	r18, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <__vector_1+0x38>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <__vector_1+0x42>
 17c:	00 00       	nop
		_delay_ms(50);
		uart_transmit(onbyte2);
 17e:	8e ef       	ldi	r24, 0xFE	; 254
 180:	0e 94 82 00 	call	0x104	; 0x104 <uart_transmit>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	80 e7       	ldi	r24, 0x70	; 112
 188:	92 e0       	ldi	r25, 0x02	; 2
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <__vector_1+0x50>
 192:	00 c0       	rjmp	.+0      	; 0x194 <__vector_1+0x5a>
 194:	00 00       	nop
 196:	18 c0       	rjmp	.+48     	; 0x1c8 <__vector_1+0x8e>
// 		uart_transmit(on2);
// 		_delay_ms(50);
// 		uart_transmit(on3);
// 		_delay_ms(50);
// 		uart_transmit(on4);
		uart_transmit(offbyte1);
 198:	8e ef       	ldi	r24, 0xFE	; 254
 19a:	0e 94 82 00 	call	0x104	; 0x104 <uart_transmit>
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	80 e7       	ldi	r24, 0x70	; 112
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	80 40       	sbci	r24, 0x00	; 0
 1a8:	90 40       	sbci	r25, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <__vector_1+0x6a>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <__vector_1+0x74>
 1ae:	00 00       	nop
		_delay_ms(50);
		uart_transmit(offbyte2);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 82 00 	call	0x104	; 0x104 <uart_transmit>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	80 e7       	ldi	r24, 0x70	; 112
 1ba:	92 e0       	ldi	r25, 0x02	; 2
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <__vector_1+0x82>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <__vector_1+0x8c>
 1c6:	00 00       	nop
		_delay_ms(50);
	}
	flag = !flag;
 1c8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	91 11       	cpse	r25, r1
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <main>:

int main()
{
	DDRC &= ~(1 << PINC0);
 1f8:	38 98       	cbi	0x07, 0	; 7
	
	EICRA |= (1 << ISC01);
 1fa:	e9 e6       	ldi	r30, 0x69	; 105
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	82 60       	ori	r24, 0x02	; 2
 202:	80 83       	st	Z, r24
	EICRA &= ~(1 << ISC00);
 204:	80 81       	ld	r24, Z
 206:	8e 7f       	andi	r24, 0xFE	; 254
 208:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);
 20a:	e8 9a       	sbi	0x1d, 0	; 29
	EIFR |= (1 << INTF0);
 20c:	e0 9a       	sbi	0x1c, 0	; 28
	sei();
 20e:	78 94       	sei
	
	//initialize ADC
	InitADC();
 210:	0e 94 8a 00 	call	0x114	; 0x114 <InitADC>
	
	//Initialize USART0
	uart_init();
 214:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>
 218:	2a ea       	ldi	r18, 0xAA	; 170
 21a:	36 ee       	ldi	r19, 0xE6	; 230
 21c:	86 e9       	ldi	r24, 0x96	; 150
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	21 50       	subi	r18, 0x01	; 1
 222:	30 40       	sbci	r19, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	d9 f7       	brne	.-10     	; 0x220 <main+0x28>
 22a:	00 00       	nop
	//ADCSRA |= (1<<ADSC);
	
	while(1)
	{
		_delay_ms(10000);
		if (!(EIMSK & (1 << INT0))){
 22c:	e8 99       	sbic	0x1d, 0	; 29
 22e:	f4 cf       	rjmp	.-24     	; 0x218 <main+0x20>
			EIMSK |= (1 << INT0);	
 230:	e8 9a       	sbi	0x1d, 0	; 29
 232:	f2 cf       	rjmp	.-28     	; 0x218 <main+0x20>

00000234 <_exit>:
 234:	f8 94       	cli

00000236 <__stop_program>:
 236:	ff cf       	rjmp	.-2      	; 0x236 <__stop_program>
